{
  "address": "0x2CAbC2713B7c0ebDA5d909e2bAdd3E777972601a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "winner",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        }
      ],
      "name": "ElectionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "university",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electionEndBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeHeld",
          "type": "uint256"
        }
      ],
      "name": "ElectionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeReturned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPresident",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPresident",
          "type": "address"
        }
      ],
      "name": "PresidentChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "professor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "university",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalProfessors",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "ProfessorEnrolled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "professor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "university",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalProfessors",
          "type": "uint256"
        }
      ],
      "name": "ProfessorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum YourContract.Status",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "StatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "university",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "UniversityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "university",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "UniversityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "university",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "voteHash",
          "type": "string"
        }
      ],
      "name": "UniversityVoted",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ELECTION_DURATION_BLOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ELECTION_START_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENROLLMENT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUORUM_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTE_STATUS",
      "outputs": [
        {
          "internalType": "enum YourContract.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINNER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "university",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addUniversity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "winningVote",
          "type": "string"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPresident",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "electionEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "university",
          "type": "address"
        }
      ],
      "name": "enrollProfessor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeHoldingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUniversities",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUniversitiesWithNames",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElectionInfo",
      "outputs": [
        {
          "internalType": "enum YourContract.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUniversities",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHeldFeeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "starter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "professor",
          "type": "address"
        }
      ],
      "name": "getProfessorInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "university",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "university",
          "type": "address"
        }
      ],
      "name": "getUniversityInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "professorCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heldFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isCurrentPresident",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUniversity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "professorToUniversity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeProfessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "university",
          "type": "address"
        }
      ],
      "name": "removeUniversity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "univNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "universities",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "universityNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "universityProfessors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "universityThatStartedElection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "voteData",
          "type": "string"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votesMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votesNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6d388f6bebc3508af6d9870747cbea4af5be86531ae9668f6c5fac5f18a8a032",
  "receipt": {
    "to": null,
    "from": "0xf872Ab63F22a37B77247FC02F2C933B041b1e05E",
    "contractAddress": "0x2CAbC2713B7c0ebDA5d909e2bAdd3E777972601a",
    "transactionIndex": 11,
    "gasUsed": "2407924",
    "logsBloom": "0x
    "blockHash": "0xa55f4e8c505a9497ea6f881cad8aa4a8a0a4de6271ac349d6314a2c049d24b56",
    "transactionHash": "0x6d388f6bebc3508af6d9870747cbea4af5be86531ae9668f6c5fac5f18a8a032",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 29924622,
        "transactionHash": "0x6d388f6bebc3508af6d9870747cbea4af5be86531ae9668f6c5fac5f18a8a032",
        "address": "0x2CAbC2713B7c0ebDA5d909e2bAdd3E777972601a",
        "topics": [
          "0xa878a03d3ba8fcaefa030d8a980cfc8b341fca97313e646b436d4ff33d447e04",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f872ab63f22a37b77247fc02f2c933b041b1e05e"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0xa55f4e8c505a9497ea6f881cad8aa4a8a0a4de6271ac349d6314a2c049d24b56"
      }
    ],
    "blockNumber": 29924622,
    "cumulativeGasUsed": "4404539",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a15690ed1641b8d4abea5c4f7fb489d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winner\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"ElectionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electionEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeHeld\",\"type\":\"uint256\"}],\"name\":\"ElectionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPresident\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPresident\",\"type\":\"address\"}],\"name\":\"PresidentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"professor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalProfessors\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"ProfessorEnrolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"professor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalProfessors\",\"type\":\"uint256\"}],\"name\":\"ProfessorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum YourContract.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"StatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"UniversityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"UniversityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"voteHash\",\"type\":\"string\"}],\"name\":\"UniversityVoted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ELECTION_DURATION_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ELECTION_START_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENROLLMENT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUORUM_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_STATUS\",\"outputs\":[{\"internalType\":\"enum YourContract.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addUniversity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"winningVote\",\"type\":\"string\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPresident\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"electionEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"}],\"name\":\"enrollProfessor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeHoldingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUniversities\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUniversitiesWithNames\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElectionInfo\",\"outputs\":[{\"internalType\":\"enum YourContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUniversities\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHeldFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"starter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"professor\",\"type\":\"address\"}],\"name\":\"getProfessorInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"}],\"name\":\"getUniversityInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"professorCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCurrentPresident\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUniversity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"professorToUniversity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeProfessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"university\",\"type\":\"address\"}],\"name\":\"removeUniversity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVotation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"universities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"universityNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"universityProfessors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"universityThatStartedElection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"voteData\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votesMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votesNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A secure contract for managing university elections and professor enrollments\",\"kind\":\"dev\",\"methods\":{\"addUniversity(address,string)\":{\"details\":\"Add a new university to the system (only current president)\",\"params\":{\"name\":\"The name of the university\",\"university\":\"The address of the university\"}},\"checkStatus()\":{\"details\":\"Check if election should be closed and close it if conditions are met\"},\"close(string)\":{\"details\":\"Close the election and set the winner\",\"params\":{\"winningVote\":\"The winning vote result as a JSON string\"}},\"enrollProfessor(address)\":{\"details\":\"Enroll a professor in a university\",\"params\":{\"university\":\"The university address to enroll the professor in\"}},\"getAllUniversities()\":{\"details\":\"Get all university addresses\",\"returns\":{\"_0\":\"Array of university addresses\"}},\"getAllUniversitiesWithNames()\":{\"details\":\"Get all university addresses with their names\",\"returns\":{\"addresses\":\"Array of university addresses\",\"names\":\"Array of university names\"}},\"getContractBalance()\":{\"details\":\"Get contract balance\",\"returns\":{\"_0\":\"Current contract balance in wei\"}},\"getCurrentBlock()\":{\"details\":\"Get current block number (useful for frontend)\",\"returns\":{\"_0\":\"Current block number\"}},\"getElectionInfo()\":{\"details\":\"Get election information\",\"returns\":{\"endBlock\":\"Block number when election ends\",\"status\":\"Current election status\",\"totalUniversities\":\"Total number of universities\",\"totalVotes\":\"Number of votes cast\"}},\"getHeldFeeInfo()\":{\"details\":\"Get held fee information\",\"returns\":{\"amount\":\"Amount of fee being held\",\"holder\":\"Address holding the fee\",\"starter\":\"University that started the election\"}},\"getProfessorInfo(address)\":{\"details\":\"Check if an address is a professor and get their university\",\"params\":{\"professor\":\"The professor address to check\"},\"returns\":{\"university\":\"The university the professor is enrolled in (address(0) if not enrolled)\"}},\"getUniversityInfo(address)\":{\"details\":\"Get university information\",\"params\":{\"university\":\"The university address\"},\"returns\":{\"isValid\":\"Whether the address is a valid university\",\"name\":\"The name of the university\",\"professorCount\":\"Number of professors in the university\",\"voted\":\"Whether the university has voted in current election\"}},\"isCurrentPresident(address)\":{\"details\":\"Check if an address is the current president\",\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"True if the address is the current president\"}},\"removeProfessor()\":{\"details\":\"Remove a professor from their current university\"},\"removeUniversity(address)\":{\"details\":\"Remove a university from the system (only current president)\",\"params\":{\"university\":\"The address of the university to remove\"}},\"startVotation()\":{\"details\":\"Start a new election (can be called by any university with fee)\"},\"vote(string)\":{\"details\":\"Submit a vote during an active election\",\"params\":{\"voteData\":\"The encrypted vote data as a JSON string\"}}},\"title\":\"University Election Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract handles university elections with encrypted voting and professor management\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"YourContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title University Election Contract\\n * @dev A secure contract for managing university elections and professor enrollments\\n * @notice This contract handles university elections with encrypted voting and professor management\\n */\\ncontract YourContract {\\n    // ============ CONSTANTS ============\\n    \\n    uint256 public constant CAP = 30; // Maximum professors per university\\n    uint256 public constant ENROLLMENT_FEE = 10 wei; // Fee for professor enrollment\\n    uint256 public constant ELECTION_START_FEE = 100 wei; // Fee to start election\\n    uint256 public constant ELECTION_DURATION_BLOCKS = 1000; // Election duration in blocks\\n    uint256 public constant QUORUM_PERCENTAGE = 50; // Percentage needed for quorum (50%)\\n\\n    // ============ ENUMS ============\\n    \\n    enum Status { NO_ELECTION, IN_PROGRESS, CLOSED }\\n\\n    // ============ STATE VARIABLES ============\\n    \\n    // Current President (winner of last election)\\n    address public currentPresident;\\n    \\n    // University and professor mappings\\n    mapping(address => uint256) public universityProfessors;\\n    mapping(address => bool) public isUniversity;\\n    mapping(address => address) public professorToUniversity;\\n    mapping(address => string) public universityNames;\\n    \\n    // Voting mappings\\n    mapping(address => string) public votesMap;\\n    mapping(address => bool) public hasVoted;\\n    \\n    // Election state\\n    Status public VOTE_STATUS;\\n    uint256 public votesNumber;\\n    uint256 public electionEndBlock;\\n    address public universityThatStartedElection; // University that started current election\\n    address public feeHoldingAddress; // Address holding the election fee\\n    uint256 public heldFee; // Amount of fee being held\\n    string public WINNER;\\n    \\n    // University list\\n    address[] public universities;\\n    uint256 public univNumber;\\n\\n    // ============ EVENTS ============\\n    \\n    event PresidentChanged(address indexed previousPresident, address indexed newPresident);\\n    event UniversityAdded(address indexed university, string name);\\n    event UniversityRemoved(address indexed university, string name);\\n    event UniversityVoted(address indexed university, string voteHash);\\n    event ProfessorEnrolled(address indexed professor, address indexed university, uint256 totalProfessors, uint256 feePaid);\\n    event ProfessorRemoved(address indexed professor, address indexed university, uint256 totalProfessors);\\n    event StatusChanged(Status newStatus);\\n    event ElectionStarted(address indexed university, uint256 electionEndBlock, uint256 feeHeld);\\n    event ElectionClosed(string winner, uint256 totalVotes);\\n    event FeeReceived(address indexed from, address indexed to, uint256 amount);\\n    event FeeReturned(address indexed to, uint256 amount);\\n\\n    // ============ MODIFIERS ============\\n    \\n    modifier onlyCurrentPresident() {\\n        require(msg.sender == currentPresident, \\\"Only current president can call this function\\\");\\n        _;\\n    }\\n    \\n    modifier onlyWhenNoElection() {\\n        require(VOTE_STATUS == Status.NO_ELECTION, \\\"Action not allowed during election\\\");\\n        _;\\n    }\\n\\n    modifier onlyDuringElection() {\\n        require(VOTE_STATUS == Status.IN_PROGRESS, \\\"Election is not in progress\\\");\\n        require(block.number < electionEndBlock, \\\"Election has ended\\\");\\n        _;\\n    }\\n\\n    modifier onlyUniversities() {\\n        require(isUniversity[msg.sender], \\\"Sender is not a recognized university\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhenClosed() {\\n        require(VOTE_STATUS == Status.CLOSED, \\\"Election is not closed\\\");\\n        _;\\n    }\\n\\n    modifier validAddress(address _address) {\\n        require(_address != address(0), \\\"Invalid address: zero address\\\");\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(VOTE_STATUS != Status.IN_PROGRESS || !hasVoted[msg.sender], \\\"Reentrancy not allowed\\\");\\n        _;\\n    }\\n\\n    // ============ CONSTRUCTOR ============\\n    \\n    constructor() {\\n        VOTE_STATUS = Status.NO_ELECTION;\\n        votesNumber = 0;\\n        univNumber = 0;\\n        heldFee = 0;\\n        currentPresident = msg.sender;\\n        \\n        emit PresidentChanged(address(0), currentPresident);\\n    }\\n\\n    // ============ PRESIDENT MANAGEMENT FUNCTIONS ============\\n    \\n    /**\\n     * @dev Add a new university to the system (only current president)\\n     * @param university The address of the university\\n     * @param name The name of the university\\n     */\\n    function addUniversity(address university, string memory name) \\n        external \\n        onlyCurrentPresident \\n        onlyWhenNoElection \\n        validAddress(university) \\n    {\\n        require(!isUniversity[university], \\\"University already exists\\\");\\n        require(bytes(name).length > 0, \\\"University name cannot be empty\\\");\\n        require(bytes(name).length <= 100, \\\"University name too long\\\");\\n        require(university != currentPresident, \\\"President cannot be a university\\\");\\n\\n        universities.push(university);\\n        isUniversity[university] = true;\\n        universityNames[university] = name;\\n        universityProfessors[university] = 0;\\n        univNumber = universities.length;\\n\\n        emit UniversityAdded(university, name);\\n    }\\n\\n    /**\\n     * @dev Remove a university from the system (only current president)\\n     * @param university The address of the university to remove\\n     */\\n    function removeUniversity(address university) \\n        external \\n        onlyCurrentPresident \\n        onlyWhenNoElection \\n        validAddress(university) \\n    {\\n        require(isUniversity[university], \\\"University does not exist\\\");\\n        require(universityProfessors[university] == 0, \\\"Cannot remove university with enrolled professors\\\");\\n\\n        // Find and remove university from array\\n        for (uint256 i = 0; i < universities.length; i++) {\\n            if (universities[i] == university) {\\n                universities[i] = universities[universities.length - 1];\\n                universities.pop();\\n                break;\\n            }\\n        }\\n\\n        string memory name = universityNames[university];\\n        \\n        // Clean up mappings\\n        isUniversity[university] = false;\\n        universityNames[university] = \\\"\\\";\\n        hasVoted[university] = false;\\n        votesMap[university] = \\\"\\\";\\n        \\n        univNumber = universities.length;\\n\\n        emit UniversityRemoved(university, name);\\n    }\\n\\n    // ============ PROFESSOR MANAGEMENT FUNCTIONS ============\\n    \\n    /**\\n     * @dev Enroll a professor in a university\\n     * @param university The university address to enroll the professor in\\n     */\\n    function enrollProfessor(address university) \\n        external \\n        payable \\n        onlyWhenNoElection \\n        validAddress(university)\\n        nonReentrant \\n    {\\n        require(isUniversity[university], \\\"Invalid university address\\\");\\n        require(professorToUniversity[msg.sender] == address(0), \\\"Professor already enrolled\\\");\\n        require(universityProfessors[university] < CAP, \\\"University at capacity\\\");\\n        require(msg.value >= ENROLLMENT_FEE, \\\"Insufficient enrollment fee\\\");\\n        require(msg.sender != university, \\\"University cannot enroll itself as professor\\\");\\n\\n        // Store the fee for potential refund calculation\\n        uint256 feeToTransfer = ENROLLMENT_FEE;\\n        uint256 refund = msg.value - ENROLLMENT_FEE;\\n\\n        // Assign professor to university\\n        professorToUniversity[msg.sender] = university;\\n        universityProfessors[university] += 1;\\n\\n        // Transfer fee to university\\n        (bool success, ) = payable(university).call{value: feeToTransfer}(\\\"\\\");\\n        require(success, \\\"Fee transfer to university failed\\\");\\n\\n        // Refund excess payment\\n        if (refund > 0) {\\n            (bool refundSuccess, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n\\n        emit FeeReceived(msg.sender, university, feeToTransfer);\\n        emit ProfessorEnrolled(msg.sender, university, universityProfessors[university], feeToTransfer);\\n    }\\n\\n    /**\\n     * @dev Remove a professor from their current university\\n     */\\n    function removeProfessor() external onlyWhenNoElection nonReentrant {\\n        address university = professorToUniversity[msg.sender];\\n        require(university != address(0), \\\"Professor not enrolled in any university\\\");\\n\\n        // Update state before external call (CEI pattern)\\n        universityProfessors[university] -= 1;\\n        professorToUniversity[msg.sender] = address(0);\\n\\n        emit ProfessorRemoved(msg.sender, university, universityProfessors[university]);\\n    }\\n\\n    // ============ ELECTION FUNCTIONS ============\\n    \\n    /**\\n     * @dev Start a new election (can be called by any university with fee)\\n     */\\n    function startVotation() external payable onlyWhenNoElection onlyUniversities nonReentrant {\\n        require(univNumber > 0, \\\"No universities registered\\\");\\n        require(msg.value >= ELECTION_START_FEE, \\\"Insufficient election start fee\\\");\\n        \\n        // Store fee information\\n        uint256 refund = msg.value - ELECTION_START_FEE;\\n        heldFee = ELECTION_START_FEE;\\n        feeHoldingAddress = address(this);\\n        universityThatStartedElection = msg.sender;\\n        \\n        // Refund excess payment\\n        if (refund > 0) {\\n            (bool refundSuccess, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n\\n        // Set election state\\n        VOTE_STATUS = Status.IN_PROGRESS;\\n        electionEndBlock = block.number + ELECTION_DURATION_BLOCKS;\\n        votesNumber = 0;\\n\\n        // Reset voting state for all universities\\n        for (uint256 i = 0; i < universities.length; i++) {\\n            hasVoted[universities[i]] = false;\\n            votesMap[universities[i]] = \\\"\\\";\\n        }\\n\\n        emit ElectionStarted(msg.sender, electionEndBlock, heldFee);\\n        emit StatusChanged(VOTE_STATUS);\\n    }\\n\\n    /**\\n     * @dev Submit a vote during an active election\\n     * @param voteData The encrypted vote data as a JSON string\\n     */\\n    function vote(string memory voteData) external onlyDuringElection onlyUniversities {\\n        require(!hasVoted[msg.sender], \\\"University has already voted\\\");\\n        require(bytes(voteData).length > 0, \\\"Vote data cannot be empty\\\");\\n        require(bytes(voteData).length <= 1000, \\\"Vote data too large\\\");\\n\\n        // Mark university as voted and store vote\\n        hasVoted[msg.sender] = true;\\n        votesMap[msg.sender] = voteData;\\n        votesNumber += 1;\\n\\n        emit UniversityVoted(msg.sender, voteData);\\n\\n        // Auto-check if election should close\\n        _checkElectionStatus();\\n    }\\n\\n    /**\\n     * @dev Check if election should be closed and close it if conditions are met\\n     */\\n    function checkStatus() external {\\n        _checkElectionStatus();\\n    }\\n\\n    /**\\n     * @dev Internal function to check and update election status\\n     */\\n    function _checkElectionStatus() internal {\\n        if (VOTE_STATUS == Status.IN_PROGRESS) {\\n            bool shouldClose = (votesNumber >= univNumber) || (block.number >= electionEndBlock);\\n            \\n            if (shouldClose) {\\n                VOTE_STATUS = Status.CLOSED;\\n                emit StatusChanged(VOTE_STATUS);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Close the election and set the winner\\n     * @param winningVote The winning vote result as a JSON string\\n     */\\n    function close(string memory winningVote) external onlyWhenClosed {\\n        require(bytes(winningVote).length > 0, \\\"Winner data cannot be empty\\\");\\n        require(bytes(winningVote).length <= 500, \\\"Winner data too large\\\");\\n\\n        // Store winner\\n        WINNER = winningVote;\\n        uint256 totalVotes = votesNumber;\\n\\n        // Return fee to university that started election\\n        if (heldFee > 0 && universityThatStartedElection != address(0)) {\\n            uint256 feeToReturn = heldFee;\\n            address recipient = universityThatStartedElection;\\n            \\n            // Reset fee tracking\\n            heldFee = 0;\\n            feeHoldingAddress = address(0);\\n            \\n            // Transfer fee back\\n            (bool success, ) = payable(recipient).call{value: feeToReturn}(\\\"\\\");\\n            if (success) {\\n                emit FeeReturned(recipient, feeToReturn);\\n            }\\n        }\\n\\n        // Set new president based on election winner\\n        // In a real implementation, you'd parse winningVote to determine the new president\\n        // For simplicity, we'll set the university that started the election as the new president\\n        // You can modify this logic based on your specific requirements\\n        address newPresident = universityThatStartedElection;\\n        address oldPresident = currentPresident;\\n        currentPresident = newPresident;\\n\\n        // Reset election state\\n        VOTE_STATUS = Status.NO_ELECTION;\\n        votesNumber = 0;\\n        electionEndBlock = 0;\\n        universityThatStartedElection = address(0);\\n\\n        // Clear voting data\\n        for (uint256 i = 0; i < universities.length; i++) {\\n            hasVoted[universities[i]] = false;\\n            votesMap[universities[i]] = \\\"\\\";\\n        }\\n\\n        emit ElectionClosed(winningVote, totalVotes);\\n        emit PresidentChanged(oldPresident, newPresident);\\n        emit StatusChanged(VOTE_STATUS);\\n    }\\n\\n    // ============ VIEW FUNCTIONS ============\\n    \\n    /**\\n     * @dev Get all university addresses\\n     * @return Array of university addresses\\n     */\\n    function getAllUniversities() external view returns (address[] memory) {\\n        return universities;\\n    }\\n\\n    /**\\n     * @dev Get all university addresses with their names\\n     * @return addresses Array of university addresses\\n     * @return names Array of university names\\n     */\\n    function getAllUniversitiesWithNames() external view returns (address[] memory addresses, string[] memory names) {\\n        addresses = new address[](universities.length);\\n        names = new string[](universities.length);\\n        \\n        for (uint256 i = 0; i < universities.length; i++) {\\n            addresses[i] = universities[i];\\n            names[i] = universityNames[universities[i]];\\n        }\\n        \\n        return (addresses, names);\\n    }\\n\\n    /**\\n     * @dev Get election information\\n     * @return status Current election status\\n     * @return endBlock Block number when election ends\\n     * @return totalVotes Number of votes cast\\n     * @return totalUniversities Total number of universities\\n     */\\n    function getElectionInfo() external view returns (\\n        Status status,\\n        uint256 endBlock,\\n        uint256 totalVotes,\\n        uint256 totalUniversities\\n    ) {\\n        return (VOTE_STATUS, electionEndBlock, votesNumber, univNumber);\\n    }\\n\\n    /**\\n     * @dev Get university information\\n     * @param university The university address\\n     * @return isValid Whether the address is a valid university\\n     * @return name The name of the university\\n     * @return professorCount Number of professors in the university\\n     * @return voted Whether the university has voted in current election\\n     */\\n    function getUniversityInfo(address university) external view returns (\\n        bool isValid,\\n        string memory name,\\n        uint256 professorCount,\\n        bool voted\\n    ) {\\n        return (\\n            isUniversity[university], \\n            universityNames[university], \\n            universityProfessors[university], \\n            hasVoted[university]\\n        );\\n    }\\n\\n    /**\\n     * @dev Check if an address is a professor and get their university\\n     * @param professor The professor address to check\\n     * @return university The university the professor is enrolled in (address(0) if not enrolled)\\n     */\\n    function getProfessorInfo(address professor) external view returns (address university) {\\n        return professorToUniversity[professor];\\n    }\\n\\n    /**\\n     * @dev Get current block number (useful for frontend)\\n     * @return Current block number\\n     */\\n    function getCurrentBlock() external view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Get contract balance\\n     * @return Current contract balance in wei\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Check if an address is the current president\\n     * @param account The address to check\\n     * @return True if the address is the current president\\n     */\\n    function isCurrentPresident(address account) external view returns (bool) {\\n        return account == currentPresident;\\n    }\\n\\n    /**\\n     * @dev Get held fee information\\n     * @return amount Amount of fee being held\\n     * @return holder Address holding the fee\\n     * @return starter University that started the election\\n     */\\n    function getHeldFeeInfo() external view returns (uint256 amount, address holder, address starter) {\\n        return (heldFee, feeHoldingAddress, universityThatStartedElection);\\n    }\\n\\n    // ============ FALLBACK FUNCTIONS ============\\n    \\n    /**\\n     * @dev Fallback function to reject direct payments\\n     */\\n    receive() external payable {\\n        revert(\\\"Direct payments not accepted. Use specific functions.\\\");\\n    }\\n\\n    /**\\n     * @dev Fallback function for calls to non-existent functions\\n     */\\n    fallback() external payable {\\n        revert(\\\"Function does not exist\\\");\\n    }\\n}\",\"keccak256\":\"0x6ba0f130196828e8cf594afc7bed8e7f9a1b7c77380618b11ec6820d1d023aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506007805460ff1916905560006008819055600f819055600c81905580546001600160a01b0319163390811782556040519091907fa878a03d3ba8fcaefa030d8a980cfc8b341fca97313e646b436d4ff33d447e04908290a36129f9806100786000396000f3fe6080604052600436106102295760003560e01c806386852dca11610123578063b9730cde116100ab578063ec81b4831161006f578063ec81b48314610767578063ee8a7c151461077c578063f558b56914610791578063f597d99414610799578063fc36e15b146107bb57610299565b8063b9730cde146106a2578063c4d206b1146106d2578063db324ec614610702578063e77293f214610718578063ea24ae771461072e57610299565b8063a02456e0116100f2578063a02456e014610610578063a908dc6214610626578063b108501f14610646578063b68f42d31461065b578063b722dea11461068257610299565b806386852dca146105845780639a507d9b146105b05780639c38f65f146105d05780639d869eac146105f057610299565b8063482616ad116101b1578063672d5d3b11610175578063672d5d3b146105115780636a0978db146105245780636b56f186146105475780636f9fb98a1461055c57806373f226341461056f57610299565b8063482616ad1461046f5780634a48d59e1461048f578063537b9cf8146104bc5780635e8aadbb146104e95780636439f465146104fe57610299565b80632780b209116101f85780632780b2091461039b57806328f54b2f146103ca5780633b7104f2146103ec57806347ae53e21461040157806348207fe71461043957610299565b806301ec4cad146102e157806309c7536a1461032157806309eef43e146103455780632266b0a41461038557610299565b366102995760405162461bcd60e51b815260206004820152603560248201527f446972656374207061796d656e7473206e6f742061636365707465642e205573604482015274329039b832b1b4b334b190333ab731ba34b7b7399760591b60648201526084015b60405180910390fd5b60405162461bcd60e51b815260206004820152601760248201527f46756e6374696f6e20646f6573206e6f742065786973740000000000000000006044820152606401610290565b3480156102ed57600080fd5b50600c54600b54600a54604080519384526001600160a01b0392831660208501529116908201526060015b60405180910390f35b34801561032d57600080fd5b50610337600f5481565b604051908152602001610318565b34801561035157600080fd5b50610375610360366004612369565b60066020526000908152604090205460ff1681565b6040519015158152602001610318565b34801561039157600080fd5b5061033760095481565b3480156103a757600080fd5b506103756103b6366004612369565b6000546001600160a01b0391821691161490565b3480156103d657600080fd5b506103ea6103e5366004612369565b6107db565b005b3480156103f857600080fd5b506103ea610bca565b34801561040d57600080fd5b50600054610421906001600160a01b031681565b6040516001600160a01b039091168152602001610318565b34801561044557600080fd5b50610421610454366004612369565b6003602052600090815260409020546001600160a01b031681565b34801561047b57600080fd5b50600a54610421906001600160a01b031681565b34801561049b57600080fd5b506103376104aa366004612369565b60016020526000908152604090205481565b3480156104c857600080fd5b506104dc6104d7366004612369565b610bd4565b60405161031891906123d1565b3480156104f557600080fd5b50610337600a81565b6103ea61050c366004612369565b610c6e565b34801561051d57600080fd5b5043610337565b34801561053057600080fd5b50610539611141565b604051610318929190612428565b34801561055357600080fd5b50610337606481565b34801561056857600080fd5b5047610337565b34801561057b57600080fd5b506103ea611348565b34801561059057600080fd5b50600754600954600854600f546040516103189460ff16939291906124d2565b3480156105bc57600080fd5b50600b54610421906001600160a01b031681565b3480156105dc57600080fd5b506104216105eb3660046124fb565b6114e3565b3480156105fc57600080fd5b506103ea61060b3660046125b7565b61150d565b34801561061c57600080fd5b506103376103e881565b34801561063257600080fd5b506103ea6106413660046125f4565b6118bf565b34801561065257600080fd5b506104dc611b78565b34801561066757600080fd5b506007546106759060ff1681565b6040516103189190612642565b34801561068e57600080fd5b506104dc61069d366004612369565b611b85565b3480156106ae57600080fd5b506103756106bd366004612369565b60026020526000908152604090205460ff1681565b3480156106de57600080fd5b506106f26106ed366004612369565b611b9e565b6040516103189493929190612656565b34801561070e57600080fd5b5061033760085481565b34801561072457600080fd5b50610337600c5481565b34801561073a57600080fd5b50610421610749366004612369565b6001600160a01b039081166000908152600360205260409020541690565b34801561077357600080fd5b50610337601e81565b34801561078857600080fd5b50610337603281565b6103ea611c80565b3480156107a557600080fd5b506107ae61200f565b6040516103189190612689565b3480156107c757600080fd5b506103ea6107d63660046125b7565b612071565b6000546001600160a01b031633146108055760405162461bcd60e51b81526004016102909061269c565b600060075460ff16600281111561081e5761081e61249a565b1461083b5760405162461bcd60e51b8152600401610290906126e9565b806001600160a01b0381166108625760405162461bcd60e51b81526004016102909061272b565b6001600160a01b03821660009081526002602052604090205460ff166108ca5760405162461bcd60e51b815260206004820152601960248201527f556e697665727369747920646f6573206e6f74206578697374000000000000006044820152606401610290565b6001600160a01b0382166000908152600160205260409020541561094a5760405162461bcd60e51b815260206004820152603160248201527f43616e6e6f742072656d6f766520756e6976657273697479207769746820656e604482015270726f6c6c65642070726f666573736f727360781b6064820152608401610290565b60005b600e54811015610a5257826001600160a01b0316600e828154811061097457610974612762565b6000918252602090912001546001600160a01b031603610a4057600e805461099e9060019061278e565b815481106109ae576109ae612762565b600091825260209091200154600e80546001600160a01b0390921691839081106109da576109da612762565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600e805480610a1957610a196127a1565b600082815260209020810160001990810180546001600160a01b0319169055019055610a52565b80610a4a816127b7565b91505061094d565b506001600160a01b03821660009081526004602052604081208054610a76906127d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa2906127d0565b8015610aef5780601f10610ac457610100808354040283529160200191610aef565b820191906000526020600020905b815481529060010190602001808311610ad257829003601f168201915b505050506001600160a01b0385166000818152600260209081526040808320805460ff191690558051808301825283815293835260049091529020929350610b38915082612859565b506001600160a01b0383166000818152600660209081526040808320805460ff19169055805180830182528381529383526005909152902090610b7b9082612859565b50600e54600f556040516001600160a01b038416907fd860b3b17a3482d0c5c12d7969e5feee062894f942c1d9f7770cbc794cefe88b90610bbd9084906123d1565b60405180910390a2505050565b610bd26122d2565b565b60056020526000908152604090208054610bed906127d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c19906127d0565b8015610c665780601f10610c3b57610100808354040283529160200191610c66565b820191906000526020600020905b815481529060010190602001808311610c4957829003601f168201915b505050505081565b600060075460ff166002811115610c8757610c8761249a565b14610ca45760405162461bcd60e51b8152600401610290906126e9565b806001600160a01b038116610ccb5760405162461bcd60e51b81526004016102909061272b565b600160075460ff166002811115610ce457610ce461249a565b141580610d0157503360009081526006602052604090205460ff16155b610d1d5760405162461bcd60e51b815260040161029090612919565b6001600160a01b03821660009081526002602052604090205460ff16610d855760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420756e697665727369747920616464726573730000000000006044820152606401610290565b336000908152600360205260409020546001600160a01b031615610deb5760405162461bcd60e51b815260206004820152601a60248201527f50726f666573736f7220616c726561647920656e726f6c6c65640000000000006044820152606401610290565b6001600160a01b038216600090815260016020526040902054601e11610e4c5760405162461bcd60e51b8152602060048201526016602482015275556e697665727369747920617420636170616369747960501b6044820152606401610290565b600a341015610e9d5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420656e726f6c6c6d656e742066656500000000006044820152606401610290565b6001600160a01b0382163303610f0a5760405162461bcd60e51b815260206004820152602c60248201527f556e69766572736974792063616e6e6f7420656e726f6c6c20697473656c662060448201526b30b990383937b332b9b9b7b960a11b6064820152608401610290565b600a6000610f18823461278e565b33600090815260036020908152604080832080546001600160a01b0319166001600160a01b038a169081179091558352600191829052822080549394509092909190610f65908490612949565b90915550506040516000906001600160a01b0386169084908381818185875af1925050503d8060008114610fb5576040519150601f19603f3d011682016040523d82523d6000602084013e610fba565b606091505b50509050806110155760405162461bcd60e51b815260206004820152602160248201527f466565207472616e7366657220746f20756e6976657273697479206661696c656044820152601960fa1b6064820152608401610290565b81156110a557604051600090339084908381818185875af1925050503d806000811461105d576040519150601f19603f3d011682016040523d82523d6000602084013e611062565b606091505b50509050806110a35760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606401610290565b505b6040518381526001600160a01b0386169033907fb976ce971d9fe55f355fa5ff14a6ad1f520b70b700c7dcc5921ca0a64a2da26a9060200160405180910390a36001600160a01b03851660008181526001602090815260409182902054825190815290810186905233917fc1ff585fb7d6e1361ecdba3d79f085ff002baf140147cf0f65a86917132d8def910160405180910390a35050505050565b600e54606090819067ffffffffffffffff81111561116157611161612514565b60405190808252806020026020018201604052801561118a578160200160208202803683370190505b50600e5490925067ffffffffffffffff8111156111a9576111a9612514565b6040519080825280602002602001820160405280156111dc57816020015b60608152602001906001900390816111c75790505b50905060005b600e5481101561134357600e81815481106111ff576111ff612762565b9060005260206000200160009054906101000a90046001600160a01b031683828151811061122f5761122f612762565b60200260200101906001600160a01b031690816001600160a01b03168152505060046000600e838154811061126657611266612762565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054611295906127d0565b80601f01602080910402602001604051908101604052809291908181526020018280546112c1906127d0565b801561130e5780601f106112e35761010080835404028352916020019161130e565b820191906000526020600020905b8154815290600101906020018083116112f157829003601f168201915b505050505082828151811061132557611325612762565b6020026020010181905250808061133b906127b7565b9150506111e2565b509091565b600060075460ff1660028111156113615761136161249a565b1461137e5760405162461bcd60e51b8152600401610290906126e9565b600160075460ff1660028111156113975761139761249a565b1415806113b457503360009081526006602052604090205460ff16155b6113d05760405162461bcd60e51b815260040161029090612919565b336000908152600360205260409020546001600160a01b0316806114475760405162461bcd60e51b815260206004820152602860248201527f50726f666573736f72206e6f7420656e726f6c6c656420696e20616e7920756e604482015267697665727369747960c01b6064820152608401610290565b6001600160a01b0381166000908152600160208190526040822080549192909161147290849061278e565b909155505033600081815260036020908152604080832080546001600160a01b03191690556001600160a01b03851680845260018352928190205490519081529192917f4ecb49dd8b38cd5f1d5cdb8e1cc3a1a5a397595670e968370197ec09a31b99c8910160405180910390a350565b600e81815481106114f357600080fd5b6000918252602090912001546001600160a01b0316905081565b600260075460ff1660028111156115265761152661249a565b1461156c5760405162461bcd60e51b8152602060048201526016602482015275115b1958dd1a5bdb881a5cc81b9bdd0818db1bdcd95960521b6044820152606401610290565b60008151116115bd5760405162461bcd60e51b815260206004820152601b60248201527f57696e6e657220646174612063616e6e6f7420626520656d70747900000000006044820152606401610290565b6101f4815111156116085760405162461bcd60e51b815260206004820152601560248201527457696e6e6572206461746120746f6f206c6172676560581b6044820152606401610290565b600d6116148282612859565b50600854600c54158015906116335750600a546001600160a01b031615155b156116f957600c8054600a54600092839055600b80546001600160a01b031916905560405191926001600160a01b0390911691829084908381818185875af1925050503d80600081146116a2576040519150601f19603f3d011682016040523d82523d6000602084013e6116a7565b606091505b5050905080156116f557816001600160a01b03167f4956c402a303bc877358eb27e3dfbe218f7a1aa2c12939bf150f5e7069d88f51846040516116ec91815260200190565b60405180910390a25b5050505b600a8054600080546001600160a01b038084166001600160a01b0319808416821785556007805460ff19169055600885905560098590559094169094559192909116905b600e5481101561180057600060066000600e848154811061176057611760612762565b6000918252602080832091909101546001600160a01b031683528281019390935260409182018120805460ff19169415159490941790935580519182019052818152600e80549192600592909190859081106117be576117be612762565b60009182526020808320909101546001600160a01b031683528201929092526040019020906117ed9082612859565b50806117f8816127b7565b91505061173d565b507fcab4b261d6d9f41fc39ded6b0038d6e883fe0dcfc45b5c338529dcf661ea1385848460405161183292919061295c565b60405180910390a1816001600160a01b0316816001600160a01b03167fa878a03d3ba8fcaefa030d8a980cfc8b341fca97313e646b436d4ff33d447e0460405160405180910390a36007546040517fafa725e7f44cadb687a7043853fa1a7e7b8f0da74ce87ec546e9420f04da8c1e916118b19160ff90911690612642565b60405180910390a150505050565b6000546001600160a01b031633146118e95760405162461bcd60e51b81526004016102909061269c565b600060075460ff1660028111156119025761190261249a565b1461191f5760405162461bcd60e51b8152600401610290906126e9565b816001600160a01b0381166119465760405162461bcd60e51b81526004016102909061272b565b6001600160a01b03831660009081526002602052604090205460ff16156119af5760405162461bcd60e51b815260206004820152601960248201527f556e697665727369747920616c726561647920657869737473000000000000006044820152606401610290565b6000825111611a005760405162461bcd60e51b815260206004820152601f60248201527f556e6976657273697479206e616d652063616e6e6f7420626520656d707479006044820152606401610290565b606482511115611a525760405162461bcd60e51b815260206004820152601860248201527f556e6976657273697479206e616d6520746f6f206c6f6e6700000000000000006044820152606401610290565b6000546001600160a01b0390811690841603611ab05760405162461bcd60e51b815260206004820181905260248201527f507265736964656e742063616e6e6f74206265206120756e69766572736974796044820152606401610290565b600e805460018082019092557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0386169081179091556000908152600260209081526040808320805460ff19169094179093556004905220611b268382612859565b506001600160a01b03831660008181526001602052604080822091909155600e54600f55517fec1e06e5bcd47cc0ab9791be5856f0e0bab5a2be711f3f3fd979d4c694c7c1f990610bbd9085906123d1565b600d8054610bed906127d0565b60046020526000908152604090208054610bed906127d0565b6001600160a01b03811660009081526002602090815260408083205460048352818420600184528285205460069094529184205482546060948694859460ff9081169491939116908390611bf1906127d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1d906127d0565b8015611c6a5780601f10611c3f57610100808354040283529160200191611c6a565b820191906000526020600020905b815481529060010190602001808311611c4d57829003601f168201915b5050505050925093509350935093509193509193565b600060075460ff166002811115611c9957611c9961249a565b14611cb65760405162461bcd60e51b8152600401610290906126e9565b3360009081526002602052604090205460ff16611ce55760405162461bcd60e51b81526004016102909061297e565b600160075460ff166002811115611cfe57611cfe61249a565b141580611d1b57503360009081526006602052604090205460ff16155b611d375760405162461bcd60e51b815260040161029090612919565b6000600f5411611d895760405162461bcd60e51b815260206004820152601a60248201527f4e6f20756e6976657273697469657320726567697374657265640000000000006044820152606401610290565b6064341015611dda5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420656c656374696f6e20737461727420666565006044820152606401610290565b6000611de760643461278e565b6064600c55600b80546001600160a01b03199081163017909155600a80549091163317905590508015611e9e57604051600090339083908381818185875af1925050503d8060008114611e56576040519150601f19603f3d011682016040523d82523d6000602084013e611e5b565b606091505b5050905080611e9c5760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606401610290565b505b6007805460ff19166001179055611eb76103e843612949565b600955600060088190555b600e54811015611f8557600060066000600e8481548110611ee557611ee5612762565b6000918252602080832091909101546001600160a01b031683528281019390935260409182018120805460ff19169415159490941790935580519182019052818152600e8054919260059290919085908110611f4357611f43612762565b60009182526020808320909101546001600160a01b03168352820192909252604001902090611f729082612859565b5080611f7d816127b7565b915050611ec2565b50600954600c5460405133927f711f4f5cdda41420ee1ea628dc5ae0604c1b7809a0dd538249239072a55a33a992611fc592918252602082015260400190565b60405180910390a26007546040517fafa725e7f44cadb687a7043853fa1a7e7b8f0da74ce87ec546e9420f04da8c1e916120049160ff90911690612642565b60405180910390a150565b6060600e80548060200260200160405190810160405280929190818152602001828054801561206757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612049575b5050505050905090565b600160075460ff16600281111561208a5761208a61249a565b146120d75760405162461bcd60e51b815260206004820152601b60248201527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606401610290565b600954431061211d5760405162461bcd60e51b8152602060048201526012602482015271115b1958dd1a5bdb881a185cc8195b99195960721b6044820152606401610290565b3360009081526002602052604090205460ff1661214c5760405162461bcd60e51b81526004016102909061297e565b3360009081526006602052604090205460ff16156121ac5760405162461bcd60e51b815260206004820152601c60248201527f556e69766572736974792068617320616c726561647920766f746564000000006044820152606401610290565b60008151116121fd5760405162461bcd60e51b815260206004820152601960248201527f566f746520646174612063616e6e6f7420626520656d707479000000000000006044820152606401610290565b6103e8815111156122465760405162461bcd60e51b8152602060048201526013602482015272566f7465206461746120746f6f206c6172676560681b6044820152606401610290565b336000908152600660209081526040808320805460ff19166001179055600590915290206122748282612859565b506001600860008282546122889190612949565b909155505060405133907f4c3226a1730b2b26ed2b0564d3e98150a5d2dfc0232cbe893c139cd8b2f41e40906122bf9084906123d1565b60405180910390a26122cf6122d2565b50565b600160075460ff1660028111156122eb576122eb61249a565b03610bd2576000600f5460085410158061230757506009544310155b905080156122cf576007805460ff191660029081179091556040517fafa725e7f44cadb687a7043853fa1a7e7b8f0da74ce87ec546e9420f04da8c1e9161200491612642565b80356001600160a01b038116811461236457600080fd5b919050565b60006020828403121561237b57600080fd5b6123848261234d565b9392505050565b6000815180845260005b818110156123b157602081850181015186830182015201612395565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000612384602083018461238b565b600081518084526020808501945080840160005b8381101561241d5781516001600160a01b0316875295820195908201906001016123f8565b509495945050505050565b60408152600061243b60408301856123e4565b6020838203818501528185518084528284019150828160051b85010183880160005b8381101561248b57601f1987840301855261247983835161238b565b9486019492509085019060010161245d565b50909998505050505050505050565b634e487b7160e01b600052602160045260246000fd5b600381106124ce57634e487b7160e01b600052602160045260246000fd5b9052565b608081016124e082876124b0565b84602083015283604083015282606083015295945050505050565b60006020828403121561250d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261253b57600080fd5b813567ffffffffffffffff8082111561255657612556612514565b604051601f8301601f19908116603f0116810190828211818310171561257e5761257e612514565b8160405283815286602085880101111561259757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156125c957600080fd5b813567ffffffffffffffff8111156125e057600080fd5b6125ec8482850161252a565b949350505050565b6000806040838503121561260757600080fd5b6126108361234d565b9150602083013567ffffffffffffffff81111561262c57600080fd5b6126388582860161252a565b9150509250929050565b6020810161265082846124b0565b92915050565b8415158152608060208201526000612671608083018661238b565b60408301949094525090151560609091015292915050565b60208152600061238460208301846123e4565b6020808252602d908201527f4f6e6c792063757272656e7420707265736964656e742063616e2063616c6c2060408201526c3a3434b990333ab731ba34b7b760991b606082015260800190565b60208082526022908201527f416374696f6e206e6f7420616c6c6f77656420647572696e6720656c6563746960408201526137b760f11b606082015260800190565b6020808252601d908201527f496e76616c696420616464726573733a207a65726f2061646472657373000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561265057612650612778565b634e487b7160e01b600052603160045260246000fd5b6000600182016127c9576127c9612778565b5060010190565b600181811c908216806127e457607f821691505b60208210810361280457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561285457600081815260208120601f850160051c810160208610156128315750805b601f850160051c820191505b818110156128505782815560010161283d565b5050505b505050565b815167ffffffffffffffff81111561287357612873612514565b6128878161288184546127d0565b8461280a565b602080601f8311600181146128bc57600084156128a45750858301515b600019600386901b1c1916600185901b178555612850565b600085815260208120601f198616915b828110156128eb578886015182559484019460019091019084016128cc565b50858210156129095787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601690820152751499595b9d1c985b98de481b9bdd08185b1b1bddd95960521b604082015260600190565b8082018082111561265057612650612778565b60408152600061296f604083018561238b565b90508260208301529392505050565b60208082526025908201527f53656e646572206973206e6f742061207265636f676e697a656420756e697665604082015264727369747960d81b60608201526080019056fea26469706673582212202515532372b6397d03f8f0e9993377c0fb1f3ee5909e619dc7b98fd62ad4dc3664736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A secure contract for managing university elections and professor enrollments",
    "kind": "dev",
    "methods": {
      "addUniversity(address,string)": {
        "details": "Add a new university to the system (only current president)",
        "params": {
          "name": "The name of the university",
          "university": "The address of the university"
        }
      },
      "checkStatus()": {
        "details": "Check if election should be closed and close it if conditions are met"
      },
      "close(string)": {
        "details": "Close the election and set the winner",
        "params": {
          "winningVote": "The winning vote result as a JSON string"
        }
      },
      "enrollProfessor(address)": {
        "details": "Enroll a professor in a university",
        "params": {
          "university": "The university address to enroll the professor in"
        }
      },
      "getAllUniversities()": {
        "details": "Get all university addresses",
        "returns": {
          "_0": "Array of university addresses"
        }
      },
      "getAllUniversitiesWithNames()": {
        "details": "Get all university addresses with their names",
        "returns": {
          "addresses": "Array of university addresses",
          "names": "Array of university names"
        }
      },
      "getContractBalance()": {
        "details": "Get contract balance",
        "returns": {
          "_0": "Current contract balance in wei"
        }
      },
      "getCurrentBlock()": {
        "details": "Get current block number (useful for frontend)",
        "returns": {
          "_0": "Current block number"
        }
      },
      "getElectionInfo()": {
        "details": "Get election information",
        "returns": {
          "endBlock": "Block number when election ends",
          "status": "Current election status",
          "totalUniversities": "Total number of universities",
          "totalVotes": "Number of votes cast"
        }
      },
      "getHeldFeeInfo()": {
        "details": "Get held fee information",
        "returns": {
          "amount": "Amount of fee being held",
          "holder": "Address holding the fee",
          "starter": "University that started the election"
        }
      },
      "getProfessorInfo(address)": {
        "details": "Check if an address is a professor and get their university",
        "params": {
          "professor": "The professor address to check"
        },
        "returns": {
          "university": "The university the professor is enrolled in (address(0) if not enrolled)"
        }
      },
      "getUniversityInfo(address)": {
        "details": "Get university information",
        "params": {
          "university": "The university address"
        },
        "returns": {
          "isValid": "Whether the address is a valid university",
          "name": "The name of the university",
          "professorCount": "Number of professors in the university",
          "voted": "Whether the university has voted in current election"
        }
      },
      "isCurrentPresident(address)": {
        "details": "Check if an address is the current president",
        "params": {
          "account": "The address to check"
        },
        "returns": {
          "_0": "True if the address is the current president"
        }
      },
      "removeProfessor()": {
        "details": "Remove a professor from their current university"
      },
      "removeUniversity(address)": {
        "details": "Remove a university from the system (only current president)",
        "params": {
          "university": "The address of the university to remove"
        }
      },
      "startVotation()": {
        "details": "Start a new election (can be called by any university with fee)"
      },
      "vote(string)": {
        "details": "Submit a vote during an active election",
        "params": {
          "voteData": "The encrypted vote data as a JSON string"
        }
      }
    },
    "title": "University Election Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract handles university elections with encrypted voting and professor management",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "currentPresident",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 27,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "universityProfessors",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "isUniversity",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "professorToUniversity",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 39,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "universityNames",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 43,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "votesMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 47,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "hasVoted",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 50,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "VOTE_STATUS",
        "offset": 0,
        "slot": "7",
        "type": "t_enum(Status)21"
      },
      {
        "astId": 52,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "votesNumber",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 54,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "electionEndBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 56,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "universityThatStartedElection",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 58,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "feeHoldingAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 60,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "heldFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 62,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "WINNER",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "universities",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "univNumber",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)21": {
        "encoding": "inplace",
        "label": "enum YourContract.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}